<div class="story-status">
    <h3>@ListStatus (@Stories.Count())</h3>

    <ul class="dropzone @dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var story in Stories)
        { 
            <Story StoryModel="story" />
        }

    </ul>
</div>

@code {
    @using ToDo.Models;
    [CascadingParameter] StoryContainer Container { get; set; }
    [Parameter] public StoryStatuses ListStatus { get; set; }
    [Parameter] public StoryStatuses[] AllowedStatuses { get; set; }

    List<ToDo.Models.Story> Stories = new List<ToDo.Models.Story>();
    string dropClass = "";

    protected override void OnParametersSet()
    {
        Stories.Clear();
        Stories.AddRange(Container.Stories.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (ListStatus == Container.Payload.Status) return;

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status))
        {
            dropClass = "no-drop";
        }
        else
        {
            dropClass = "can-drop";
        }
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private async Task HandleDrop()
    {
        dropClass = "";

        if (AllowedStatuses != null && !AllowedStatuses.Contains(Container.Payload.Status)) return;

        await Container.UpdateStoryAsync(ListStatus);
    }
}
